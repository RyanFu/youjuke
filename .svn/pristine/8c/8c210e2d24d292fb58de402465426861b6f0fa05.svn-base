package com.youjuke.swissgearlibrary.base;


import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.support.annotation.LayoutRes;
import android.support.annotation.Nullable;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentTransaction;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import com.baidu.mobstat.StatService;
import com.google.gson.Gson;
import com.tencent.smtt.sdk.WebSettings;
import com.tencent.smtt.sdk.WebView;
import com.trello.rxlifecycle.components.support.RxFragment;
import com.youjuke.swissgearlibrary.utils.NetUtil;
import com.youjuke.swissgearlibrary.widgets.dialog.ShapeLoadingDialogMessage;
import java.io.File;
import java.util.HashMap;
import java.util.Map;

import rx.subscriptions.CompositeSubscription;

/**
 * 描述:Fragment基类
 * <p>
 * 工程:
 * #0000    Tian Xiao    2016-09-06 13:41
 * #0001    t x          2016-06-15 添加TBSWebSetting，TbsWeb缓存
 */
public abstract class BaseFragment extends RxFragment {
    protected ShapeLoadingDialogMessage mDialog;
    /**
     * 访问网络提交数据的集合
     */
    protected Map<String, Object> params = new HashMap<String, Object>();

    protected Gson gson = new Gson();

    protected View parentView;

    protected FragmentActivity activity;

    protected LayoutInflater inflater;

    protected CompositeSubscription compositeSubscription;

    protected Context mContext;

    public abstract
    @LayoutRes
    int getLayoutResId();

    private static final String STATE_SAVE_IS_HIDDEN = "STATE_SAVE_IS_HIDDEN";

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // “内存重启”时调用  解决重叠问题  #0001
        if (savedInstanceState != null) {
            boolean isSupportHidden = savedInstanceState.getBoolean(STATE_SAVE_IS_HIDDEN);

            FragmentTransaction ft = getFragmentManager().beginTransaction();
            if (isSupportHidden) {
                ft.hide(this);
            } else {
                ft.show(this);
            }
            ft.commit();
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle state) {
        mContext = container.getContext();
        //初始化Dialog
        mDialog = ShapeLoadingDialogMessage.newInstance(mContext);
        this.inflater = inflater;
        parentView = inflater.inflate(getLayoutResId(), container, false);
        activity = getSupportActivity();
        return parentView;

    }

    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        compositeSubscription = new CompositeSubscription();

        finishCreateView(savedInstanceState);
        //TBS配置
        if (mTBSWebView != null) {
            initializeWebSetting();
        }
    }

    public abstract void finishCreateView(Bundle state);

    @Override
    public void onResume() {
        super.onResume();
        StatService.onResume(this);
    }

    @Override
    public void onPause() {
        super.onPause();
        StatService.onPause(this);
    }

    @Override
    public void onDestroyView() {

        super.onDestroyView();
        compositeSubscription.unsubscribe();
    }

    @Override
    public void onAttach(Activity activity) {

        super.onAttach(activity);
        this.activity = (FragmentActivity) activity;
    }

    @Override
    public void onDetach() {

        super.onDetach();
        this.activity = null;
    }

    public FragmentActivity getSupportActivity() {

        return (FragmentActivity) super.getActivity();
    }

    public android.app.ActionBar getSupportActionBar() {

        return getSupportActivity().getActionBar();
    }

    public Context getApplicationContext() {

        return this.activity == null ? (getActivity() == null ? null : getActivity().getApplicationContext()) : this.activity.getApplicationContext();
    }

    protected LayoutInflater getLayoutInflater() {

        return inflater;
    }

    protected View getParentView() {

        return parentView;
    }

    public <T extends View> T $(int id) {

        return (T) parentView.findViewById(id);
    }

    /**
     * ----------------TBS配置 --------------
     */


    protected WebSettings mWebSetting;

    private String appCacheDir;

    protected WebView mTBSWebView;

    /**
     * TODO
     * 清除WebView缓存
     */
    public void clearWebViewCache() {

//        //清理Webview缓存数据库
//        try {
//            deleteDatabase("webview.db");
//            deleteDatabase("webviewCache.db");
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//
//        //WebView 缓存文件
//        File appCacheDir = new File(getFilesDir().getAbsolutePath()+APP_CACAHE_DIRNAME);
//        L.e( "appCacheDir path="+appCacheDir.getAbsolutePath());
//
//        File webviewCacheDir = new File(getCacheDir().getAbsolutePath()+"/webviewCache");
//        L.e( "webviewCacheDir path="+webviewCacheDir.getAbsolutePath());
//
//        //删除webview 缓存目录
//        if(webviewCacheDir.exists()){
//            deleteFile(webviewCacheDir);
//        }
//        //删除webview 缓存 缓存目录
//        if(appCacheDir.exists()){
//            deleteFile(appCacheDir);
//        }
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if (mTBSWebView != null) {
            //释放资源
            mTBSWebView.stopLoading();
            mTBSWebView.removeAllViews();
            mTBSWebView.destroy();
            mTBSWebView = null;
        }
    }

    /**
     * TBSWebSetting，TbsWeb缓存 #0001
     */
    @SuppressLint("SetJavaScriptEnabled")
    public void initializeWebSetting() {
//5.0开始改变缓存方式
        if (Build.VERSION.SDK_INT >= 19) {
            mTBSWebView.getSettings().setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);
        }

        //获取WebSettings
        mWebSetting = mTBSWebView.getSettings();
        //确认加载JS
        mWebSetting.setJavaScriptEnabled(true);
        mWebSetting.setLoadWithOverviewMode(true);
        mWebSetting.setDomStorageEnabled(true);
        mWebSetting.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.NARROW_COLUMNS);
        mWebSetting.setAppCacheMaxSize(1024 * 1024 * 20);//设置缓存大小
        //设置缓存路径
        appCacheDir = Environment.getExternalStorageDirectory().getPath() + "/youjueke/cache/";
        File fileSD = new File(appCacheDir);
        if (!fileSD.exists()) {
            fileSD.mkdir();
        }
        mWebSetting.setAppCachePath(appCacheDir);
        mWebSetting.setAllowContentAccess(true);
        mWebSetting.setAppCacheEnabled(true);
        if (NetUtil.isConnected(mContext) || NetUtil.isWIFI(mContext)) {
            //有网络网络加载
            mWebSetting.setCacheMode(WebSettings.LOAD_DEFAULT);
        } else {
            //无网时本地缓存加载
            mWebSetting.setCacheMode(WebSettings.LOAD_CACHE_ONLY);
        }
        mWebSetting.setRenderPriority(WebSettings.RenderPriority.HIGH);//渲染
        mWebSetting.setCacheMode(WebSettings.LOAD_NO_CACHE);//缓存模式。比如说某种情况下自动清理缓存
        //TODO TBS的长按事件暂住禁止掉
        mTBSWebView.setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View view) {
                return true;
            }
        });
    }
}
