package com.youjuke.buildingmaterialmall.app.login;

import android.annotation.SuppressLint;
import android.content.Intent;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.support.v7.app.ActionBar;
import android.support.v7.widget.AppCompatButton;
import android.support.v7.widget.Toolbar;
import android.view.KeyEvent;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.youjuke.buildingmaterialmall.BuildingMaterialApp;
import com.youjuke.buildingmaterialmall.R;
import com.youjuke.buildingmaterialmall.entity.User;
import com.youjuke.buildingmaterialmall.module.ClearEditText;
import com.youjuke.buildingmaterialmall.retrofit.ApiContstants;
import com.youjuke.buildingmaterialmall.retrofit.RequestBean;
import com.youjuke.buildingmaterialmall.retrofit.ResponseBean;
import com.youjuke.buildingmaterialmall.retrofit.RetrofitManager;
import com.youjuke.buildingmaterialmall.retrofit.api.CommonService;
import com.youjuke.swissgearlibrary.base.BaseActivity;
import com.youjuke.swissgearlibrary.manager.ActivityManager;
import com.youjuke.swissgearlibrary.utils.L;
import com.youjuke.swissgearlibrary.utils.SPUtil;
import com.youjuke.swissgearlibrary.utils.ToastUtil;
import com.youjuke.swissgearlibrary.utils.Validator;

import rx.Subscription;
import rx.android.schedulers.AndroidSchedulers;
import rx.functions.Action1;
import rx.schedulers.Schedulers;

/**
 * 描述: 手机号快捷登陆Activity
 * --------------------------------------------
 * 工程:
 * #0000     mwy     创建日期: 2016-10-25 15:19
 * #0001     tx      创建时期: 2016-10-25  添加布局同时编写业务逻辑
 *
 */


public class LoginByMobileActivity extends BaseActivity implements View.OnClickListener {
    private Toolbar logiToolBar;
    private TextView tvRegister;
    private LinearLayout linearLayout;
    private ClearEditText editTextMobile;
    private AppCompatButton btnVerify;
    private ClearEditText editTextCode;
    private AppCompatButton btnLogin;
    private TextView textViewVerify;
    private CountDownTimer phoneTimer;
    private CountDownTimer timer;
    private static String codeOpinion;
    private static String modile;
    private static String code;
    private static boolean getCode;
    private static User user = new User();
    private boolean isLogin = false;
    private LinearLayout linearLayoutPhoneVerifyText;

    private void assignViews() {
        linearLayoutPhoneVerifyText = (LinearLayout) findViewById(R.id.linear_layout_phone_verify_text);
        logiToolBar = (Toolbar) findViewById(R.id.logi_tool_bar);
        tvRegister = (TextView) findViewById(R.id.tv_register);
        linearLayout = (LinearLayout) findViewById(R.id.linearLayout);
        editTextMobile = (ClearEditText) findViewById(R.id.edit_text_mobile);
        btnVerify = (AppCompatButton) findViewById(R.id.btn_verify);
        editTextCode = (ClearEditText) findViewById(R.id.edit_text_code);
        btnLogin = (AppCompatButton) findViewById(R.id.btn_login);
        textViewVerify = (TextView) findViewById(R.id.textView_verify);
        btnVerify.setOnClickListener(this);
        textViewVerify.setOnClickListener(this);
        tvRegister.setOnClickListener(this);
        btnLogin.setOnClickListener(this);
        textViewVerify.setOnClickListener(this);
    }

    @Override
    public void initViews(Bundle savedInstanceState) {
        assignViews();
        phoneVerifyInitialize();//判断语音验证码是否可用
    }

    @Override
    public int getLayoutId() {
        return R.layout.activity_login_by_mobile;
    }

    @Override
    public void initToolBar() {
        setSupportActionBar(logiToolBar);

        ActionBar mActionBar = getSupportActionBar();
        if (mActionBar != null) {
            mActionBar.setDisplayHomeAsUpEnabled(true);
//			mActionBar.setDisplayUseLogoEnabled(true);
            mActionBar.setDisplayShowTitleEnabled(false);
        }
        logiToolBar.setNavigationOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                finish();
            }
        });
    }


    /**
     * 验证码倒计时
     * #0002
     */
    private void VerifyUtils() {

            timer = new CountDownTimer(60000, 1000) {

                @SuppressLint("SetTextI18n")
                @Override
                public void onTick(long l) {
                    btnVerify.setClickable(false); //设置不可点击
                    btnVerify.setText("重新发送(" + l / 1000 + ")");  //设置倒计时时间
                    btnVerify.setBackgroundResource(R.drawable.bg_identify_code_press);
                    btnVerify.setTextColor(getResources().getColor(R.color.colorTextWhite));
                }

                @Override
                public void onFinish() {
                    btnVerify.setText("重新发送");
                    btnVerify.setClickable(true);//重新获得点击
                    btnVerify.setTextColor(getResources().getColor(R.color.colorTextWhite));
                    btnVerify.setBackgroundResource(R.drawable.bg_identify_code_normal);
                }
            }.start();

    }

    /**
     * 单击事件
     *
     * @param v
     */
    @Override
    public void onClick(View v) {
        switch (v.getId()) {

            case R.id.btn_login://登陆
                modile = editTextMobile.getText().toString();
                code = editTextCode.getText().toString();
                if (modile.length() <= 0) {
                    ToastUtil.show(LoginByMobileActivity.this, "手机号不能为空");
                } else if (code.length() <= 0) {
                    ToastUtil.show(LoginByMobileActivity.this, "验证码不能为空");
                } else {
                    Login();
                }
                break;

            case R.id.btn_verify://验证码获取
                modile = editTextMobile.getText().toString();
                if (Validator.isMobile(modile)) {
                    VerifyUtils();//验证计时
                    getCode();
                } else {
                    ToastUtil.show(LoginByMobileActivity.this, "手机号格式不正确,请检查下呦");
                }
                break;

            case R.id.tv_register://注册
                Intent intent = new Intent(LoginByMobileActivity.this, RegisterAndForgetPasswordActivity.class);
                intent.putExtra("type", "register");
                startActivity(intent);
                out();
                break;
            case R.id.textView_verify://语音验证码
                modile = editTextMobile.getText().toString();
                if (Validator.isMobile(modile)) {
                    phoneVerifyUtils();//获取语音验证码
                    getPhoneVerify();
                } else {
                    ToastUtil.show(LoginByMobileActivity.this, "手机号格式不正确,请检查下呦");
                }

                break;
        }
    }

    /**
     * 登录
     */
    private void Login() {
        params.clear();
        params.put(ApiContstants.MOBIlE, modile);
        params.put(ApiContstants.CODE, code);
        params.put("login_from","yjkapp");
        L.i("开始登录");
        mDialog.showDialog();
        compositeSubscription.add(RetrofitManager.getInstance().create(CommonService.class).
                getData(new RequestBean.JsonMsg(ApiContstants.LOGIN, params).toJson())
                .compose(this.<ResponseBean>bindToLifecycle())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribeOn(Schedulers.io())
                .subscribe(new Action1<ResponseBean>() {
                    @Override
                    public void call(ResponseBean responseBean) {
                        mDialog.dimissDialog();
                        L.i(responseBean.toString());
                        if (responseBean.getStatus().equals("400")) {
                            ToastUtil.show(LoginByMobileActivity.this, responseBean.getMessage());
                        } else if (responseBean.getStatus().equals("200")) {
                            user = gson.fromJson(responseBean.getData(), User.class);
                            SPUtil.setObject(LoginByMobileActivity.this, "user", user);//保存用户信息
                            BuildingMaterialApp.user = user;
                            ToastUtil.show(LoginByMobileActivity.this, "登录成功");
                            isLogin = true;
                            out();
                        }

                    }
                }, new Action1<Throwable>() {
                    @Override
                    public void call(Throwable throwable) {
                        mDialog.dimissDialog();
                        L.i("登录时错误:" + throwable.toString());
                    }
                }));
    }

    /**
     * 请求服务器，判断语音验证码是否正常，如果正常则显示，否则隐藏语音验证。
     */
    private void phoneVerifyInitialize() {
        params.clear();
        params.put("lock", "YYYZM");
        compositeSubscription.add(
                RetrofitManager.getInstance().create(CommonService.class)
                        .getData(new RequestBean.JsonMsg(ApiContstants.CHECK_YY, params).toJson())
                        .compose(this.<ResponseBean>bindToLifecycle())
                        .subscribeOn(Schedulers.io())
                        .observeOn(AndroidSchedulers.mainThread())
                        .subscribe(new Action1<ResponseBean>() {
                            @Override
                            public void call(ResponseBean responseBean) {
                                L.d(responseBean.getData() + "");
                                if (responseBean.getStatus().equals("200")) {
                                    if (responseBean.getData().equals("1")) {
                                        linearLayoutPhoneVerifyText.setVisibility(View.VISIBLE);
                                    }

                                }

                            }
                        }, new Action1<Throwable>() {
                            @Override
                            public void call(Throwable throwable) {
                            }
                        })
        );
    }

    /**
     * 语音验证码倒计时
     */
    private void phoneVerifyUtils() {

        phoneTimer = new CountDownTimer(15000, 1000) {

            @SuppressLint("SetTextI18n")
            @Override
            public void onTick(long l) {
                textViewVerify.setClickable(false); //设置不可点击
                textViewVerify.setText("语音验证码(" + l / 1000 + ")");  //设置倒计时时间
                textViewVerify.setTextColor(getResources().getColor(R.color.c_999999));
                textViewVerify.setTextSize(16);
            }

            @Override
            public void onFinish() {
                textViewVerify.setText("语音验证码");
                textViewVerify.setTextSize(16);
                textViewVerify.setClickable(true);//重新获得点击
                textViewVerify.setTextColor(getResources().getColor(R.color.c3dbf73));
            }
        }.start();
    }

    /**
     * 获取语音验证码
     * 短信验证码为0，语音验证码为1
     * TODO 语音验证码暂定
     */
    public void getPhoneVerify() {
        params.clear();
        params.put(ApiContstants.MOBIlE, modile);
        params.put(ApiContstants.YY_TYPE, "1");
        compositeSubscription.add(
                RetrofitManager.getInstance().create(CommonService.class)
                        .getData(new RequestBean.JsonMsg(ApiContstants.REGISTER_CODE, params).toJson())
                        .compose(this.<ResponseBean>bindToLifecycle())
                        .subscribeOn(Schedulers.io())
                        .observeOn(AndroidSchedulers.mainThread())
                        .subscribe(new Action1<ResponseBean>() {
                            @Override
                            public void call(ResponseBean responseBean) {
                                L.d(responseBean.getData() + "");
                                if (responseBean.getStatus().equals("200")) {
                                    code = responseBean.getData();
                                    ToastUtil.show(LoginByMobileActivity.this, "正在拨打您的电话,请注意接听。");
                                } else if (responseBean.getStatus().equals("400")) {
                                    ToastUtil.show(LoginByMobileActivity.this, "" + responseBean.getMessage());

                                }
                            }
                        }, new Action1<Throwable>() {
                            @Override
                            public void call(Throwable throwable) {
                                ToastUtil.show(LoginByMobileActivity.this, "请求失败,请检查网络状态");
                            }
                        })
        );
    }

    /**
     * 获取验证码
     */
    private void getCode() {
        params.clear();
        params.put(ApiContstants.MOBIlE, modile);
        params.put("login_from","yjkapp");
        //开始请求
        Subscription subscribe = RetrofitManager.getInstance().create(CommonService.class)
                .getData((new RequestBean.JsonMsg(ApiContstants.GETCODE, params)).toJson())
                .compose(this.<ResponseBean>bindToLifecycle())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribeOn(Schedulers.io())
                .subscribe(new Action1<ResponseBean>() {
                    @Override
                    public void call(ResponseBean responseBean) {
                        L.i("返回信息:" + responseBean.toString());
                        if (responseBean.getStatus().equals("400")) {
                            ToastUtil.show(LoginByMobileActivity.this, responseBean.getMessage());
                        } else if (responseBean.getStatus().equals("200")) {
                            codeOpinion = responseBean.getData();
                            ToastUtil.show(LoginByMobileActivity.this, "验证码已发送,请注意查收");
                        }
                    }
                }, new Action1<Throwable>() {
                    @Override
                    public void call(Throwable throwable) {

                        L.i("验证码获取时错误:" + throwable.toString());
                    }
                });
        compositeSubscription.add(subscribe);
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK) {
            out();
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }

    public void out() {
        if (timer != null) {
            timer.cancel();
        }
        if (isLogin) {
            ActivityManager.getInstance().finishActivity(LoginActivity.class);
        }
        this.finish();
    }


}
